pacf2 <- pacf(d$mod.resid, main="PACF - Rb residuals")
pacf2
### The arima() function in r is the model we will use to fit the data based on the parameters predicted by the pacf(). Specifically, since the values outside the confidence interval were a lag term of 1 and 2 we will use auto-regressive terms and moving average terms near 1-2. In general, it is good to expand a little beyond what is beyond the confidence interval because pacf() is not perfect.
#AR
ar.1 <- arima(d$mod.resid, order=c(1,0,0))
ar.2 <- arima(d$mod.resid, order=c(2,0,0))
ar.3 <- arima(d$mod.resid, order=c(3,0,0))
ar.4 <- arima(d$mod.resid, order=c(4,0,0))
# MA
ma.1 <- arima(d$mod.resid, order=c(0,0,1))
ma.2 <- arima(d$mod.resid, order=c(0,0,2))
ma.3 <- arima(d$mod.resid, order=c(0,0,3))
ma.4 <- arima(d$mod.resid, order=c(0,0,4))
AICc(ar.1)
AICc(ar.2)
AICc(ar.3)
AICc(ar.4)
AICc(ma.1)
AICc(ma.2)
AICc(ma.3)
AICc(ma.4)
gls.mod1 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=2, q=0))
gls.mod2 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=0, q=3))
AICc(gls.mod1)
AICc(gls.mod2)
summary(gls.mod1)
confint(gls.mod1)
d$new.residuals <- resid(gls.mod1, type="normalized")
pacf3 <- pacf(d$new.residuals, main="PACF - GLS model residuals")
qqnorm(d$new.residuals)
qqline(d$new.residuals)
LakeHuron
plot(LakeHuron)
plot(diff(LakeHuron))
h <- diff(LakeHuron)
auto.arima(LakeHuron)
a <- arima(LakeHuron, c(0, 1, 0)) ## We make our arima model with the coefficients obtained before
pred <- predict(a, n.ahead = 10) ## We predict the levels of the next 10 years
pred
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(nlme) # gls (generalized least squares)
library(MuMIn) #AICc
library(MASS) # acf(), pacf(), ARIMA()
library(ggplot2) # for graphing
library(curl) # for loading the data
library(forecast) # for choosing arima coefficients
# Chunk 3
AirPassengers #Each value represents the number of people ("Air Passengers") that took the plane the month indicated by the column and the year indicated by the row.
# Chunk 4
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
# Chunk 5
plot(log(AirPassengers)) #Using "log" function to change the variance.
abline(reg=lm(log(AirPassengers)~time(log(AirPassengers))))
# Chunk 6
plot(diff(log(AirPassengers))) #Using "diff" function to change the mean.
abline(reg=lm(diff(log(AirPassengers))~time(diff(log(AirPassengers)))))
# Chunk 7
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
# Chunk 8
names(d)
# Chunk 9
plot(Rb ~ Year.AD, data=d, type="l", pch=16,
ylab="ppm", xlab="Year")
ggplot(data = d, aes(x=Year.AD, y= Rb)) + geom_line()
# Chunk 10
pacf1 <- pacf(d$Rb, main="PACF")
# Chunk 11
lm1 <- lm(Rb ~ Year.AD, data=d)
summary (lm1)
# Chunk 12
d$mod.resid <- residuals(lm1)
pacf2 <- pacf(d$mod.resid, main="PACF - Rb residuals")
pacf2
# Chunk 13
### The arima() function in r is the model we will use to fit the data based on the parameters predicted by the pacf(). Specifically, since the values outside the confidence interval were a lag term of 1 and 2 we will use auto-regressive terms and moving average terms near 1-2. In general, it is good to expand a little beyond what is beyond the confidence interval because pacf() is not perfect.
#AR
ar.1 <- arima(d$mod.resid, order=c(1,0,0))
ar.2 <- arima(d$mod.resid, order=c(2,0,0))
ar.3 <- arima(d$mod.resid, order=c(3,0,0))
ar.4 <- arima(d$mod.resid, order=c(4,0,0))
# MA
ma.1 <- arima(d$mod.resid, order=c(0,0,1))
ma.2 <- arima(d$mod.resid, order=c(0,0,2))
ma.3 <- arima(d$mod.resid, order=c(0,0,3))
ma.4 <- arima(d$mod.resid, order=c(0,0,4))
# Chunk 14
AICc(ar.1)
AICc(ar.2)
AICc(ar.3)
AICc(ar.4)
AICc(ma.1)
AICc(ma.2)
AICc(ma.3)
AICc(ma.4)
# Chunk 15
gls.mod1 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=2, q=0))
gls.mod2 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=0, q=3))
# Chunk 16
AICc(gls.mod1)
AICc(gls.mod2)
# Chunk 17
summary(gls.mod1)
confint(gls.mod1)
d$new.residuals <- resid(gls.mod1, type="normalized")
pacf3 <- pacf(d$new.residuals, main="PACF - GLS model residuals")
# Chunk 18
qqnorm(d$new.residuals)
qqline(d$new.residuals)
# Chunk 19
LakeHuron
# Chunk 20
plot(LakeHuron)
# Chunk 21
plot(diff(LakeHuron))
h <- diff(LakeHuron)
# Chunk 22
auto.arima(LakeHuron)
# Chunk 23
a <- arima(LakeHuron, c(0, 1, 0)) ## We make our arima model with the coefficients obtained before
pred <- predict(a, n.ahead = 10) ## We predict the levels of the next 10 years
pred
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(nlme) # gls (generalized least squares)
library(MuMIn) #AICc
library(MASS) # acf(), pacf(), ARIMA()
library(ggplot2) # for graphing
library(curl) # for loading the data
library(forecast) # for choosing arima coefficients
# Chunk 3
AirPassengers #Each value represents the number of people ("Air Passengers") that took the plane the month indicated by the column and the year indicated by the row.
# Chunk 4
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
# Chunk 5
plot(log(AirPassengers)) #Using "log" function to change the variance.
abline(reg=lm(log(AirPassengers)~time(log(AirPassengers))))
# Chunk 6
plot(diff(log(AirPassengers))) #Using "diff" function to change the mean.
abline(reg=lm(diff(log(AirPassengers))~time(diff(log(AirPassengers)))))
# Chunk 7
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
# Chunk 8
names(d)
# Chunk 9
plot(Rb ~ Year.AD, data=d, type="l", pch=16,
ylab="ppm", xlab="Year")
ggplot(data = d, aes(x=Year.AD, y= Rb)) + geom_line()
# Chunk 10
pacf1 <- pacf(d$Rb, main="PACF")
# Chunk 11
lm1 <- lm(Rb ~ Year.AD, data=d)
summary (lm1)
# Chunk 12
d$mod.resid <- residuals(lm1)
pacf2 <- pacf(d$mod.resid, main="PACF - Rb residuals")
pacf2
# Chunk 13
### The arima() function in r is the model we will use to fit the data based on the parameters predicted by the pacf(). Specifically, since the values outside the confidence interval were a lag term of 1 and 2 we will use auto-regressive terms and moving average terms near 1-2. In general, it is good to expand a little beyond what is beyond the confidence interval because pacf() is not perfect.
#AR
ar.1 <- arima(d$mod.resid, order=c(1,0,0))
ar.2 <- arima(d$mod.resid, order=c(2,0,0))
ar.3 <- arima(d$mod.resid, order=c(3,0,0))
ar.4 <- arima(d$mod.resid, order=c(4,0,0))
# MA
ma.1 <- arima(d$mod.resid, order=c(0,0,1))
ma.2 <- arima(d$mod.resid, order=c(0,0,2))
ma.3 <- arima(d$mod.resid, order=c(0,0,3))
ma.4 <- arima(d$mod.resid, order=c(0,0,4))
# Chunk 14
AICc(ar.1)
AICc(ar.2)
AICc(ar.3)
AICc(ar.4)
AICc(ma.1)
AICc(ma.2)
AICc(ma.3)
AICc(ma.4)
# Chunk 15
gls.mod1 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=2, q=0))
gls.mod2 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=0, q=3))
# Chunk 16
AICc(gls.mod1)
AICc(gls.mod2)
# Chunk 17
summary(gls.mod1)
confint(gls.mod1)
d$new.residuals <- resid(gls.mod1, type="normalized")
pacf3 <- pacf(d$new.residuals, main="PACF - GLS model residuals")
# Chunk 18
qqnorm(d$new.residuals)
qqline(d$new.residuals)
# Chunk 19
LakeHuron
# Chunk 20
plot(LakeHuron)
# Chunk 21
plot(diff(LakeHuron))
h <- diff(LakeHuron)
# Chunk 22
auto.arima(LakeHuron)
# Chunk 23
a <- arima(LakeHuron, c(0, 1, 0)) ## We make our arima model with the coefficients obtained before
pred <- predict(a, n.ahead = 10) ## We predict the levels of the next 10 years
pred
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
View(d)
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
library(nlme) # gls (generalized least squares)
library(MuMIn) #AICc
library(MASS) # acf(), pacf(), ARIMA()
library(ggplot2) # for graphing
library(curl) # for loading the data
library(forecast) # for choosing arima coefficients
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE)
head(d)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(nlme) # gls (generalized least squares)
library(MuMIn) #AICc
library(MASS) # acf(), pacf(), ARIMA()
library(ggplot2) # for graphing
library(curl) # for loading the data
library(forecast) # for choosing arima coefficients
# Chunk 3
AirPassengers #Each value represents the number of people ("Air Passengers") that took the plane the month indicated by the column and the year indicated by the row.
# Chunk 4
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
# Chunk 5
plot(log(AirPassengers)) #Using "log" function to change the variance.
abline(reg=lm(log(AirPassengers)~time(log(AirPassengers))))
# Chunk 6
plot(diff(log(AirPassengers))) #Using "diff" function to change the mean.
abline(reg=lm(diff(log(AirPassengers))~time(diff(log(AirPassengers)))))
# Chunk 7
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE)
head(d)
# Chunk 8
names(d)
# Chunk 9
plot(Rb ~ Year.AD, data=d, type="l", pch=16,
ylab="ppm", xlab="Year")
ggplot(data = d, aes(x=Year.AD, y= Rb)) + geom_line()
# Chunk 10
pacf1 <- pacf(d$Rb, main="PACF")
# Chunk 11
lm1 <- lm(Rb ~ Year.AD, data=d)
summary (lm1)
# Chunk 12
d$mod.resid <- residuals(lm1)
pacf2 <- pacf(d$mod.resid, main="PACF - Rb residuals")
pacf2
# Chunk 13
### The arima() function in r is the model we will use to fit the data based on the parameters predicted by the pacf(). Specifically, since the values outside the confidence interval were a lag term of 1 and 2 we will use auto-regressive terms and moving average terms near 1-2. In general, it is good to expand a little beyond what is beyond the confidence interval because pacf() is not perfect.
#AR
ar.1 <- arima(d$mod.resid, order=c(1,0,0))
ar.2 <- arima(d$mod.resid, order=c(2,0,0))
ar.3 <- arima(d$mod.resid, order=c(3,0,0))
ar.4 <- arima(d$mod.resid, order=c(4,0,0))
# MA
ma.1 <- arima(d$mod.resid, order=c(0,0,1))
ma.2 <- arima(d$mod.resid, order=c(0,0,2))
ma.3 <- arima(d$mod.resid, order=c(0,0,3))
ma.4 <- arima(d$mod.resid, order=c(0,0,4))
# Chunk 14
AICc(ar.1)
AICc(ar.2)
AICc(ar.3)
AICc(ar.4)
AICc(ma.1)
AICc(ma.2)
AICc(ma.3)
AICc(ma.4)
# Chunk 15
gls.mod1 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=2, q=0))
gls.mod2 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=0, q=3))
# Chunk 16
AICc(gls.mod1)
AICc(gls.mod2)
# Chunk 17
summary(gls.mod1)
confint(gls.mod1)
d$new.residuals <- resid(gls.mod1, type="normalized")
pacf3 <- pacf(d$new.residuals, main="PACF - GLS model residuals")
# Chunk 18
qqnorm(d$new.residuals)
qqline(d$new.residuals)
# Chunk 19
LakeHuron
# Chunk 20
plot(LakeHuron)
# Chunk 21
plot(diff(LakeHuron))
h <- diff(LakeHuron)
# Chunk 22
auto.arima(LakeHuron)
# Chunk 23
a <- arima(LakeHuron, c(0, 1, 0)) ## We make our arima model with the coefficients obtained before
pred <- predict(a, n.ahead = 10) ## We predict the levels of the next 10 years
pred
plot(Rb ~ Year_AD, data=d, type="l", pch=16,
ylab="ppm", xlab="Year")
ggplot(data = d, aes(x=Year_AD, y= Rb)) + geom_line()
ggplot(data = d, aes(x=Year_AD, y= Rb)) + geom_line()
pacf1 <- pacf(d$Rb, main="PACF")
lm1 <- lm(Rb ~ Year.AD, data=d)
summary (lm1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(nlme) # gls (generalized least squares)
library(MuMIn) #AICc
library(MASS) # acf(), pacf(), ARIMA()
library(ggplot2) # for graphing
library(curl) # for loading the data
library(forecast) # for choosing arima coefficients
# Chunk 3
AirPassengers #Each value represents the number of people ("Air Passengers") that took the plane the month indicated by the column and the year indicated by the row.
# Chunk 4
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
# Chunk 5
plot(log(AirPassengers)) #Using "log" function to change the variance.
abline(reg=lm(log(AirPassengers)~time(log(AirPassengers))))
# Chunk 6
plot(diff(log(AirPassengers))) #Using "diff" function to change the mean.
abline(reg=lm(diff(log(AirPassengers))~time(diff(log(AirPassengers)))))
# Chunk 7
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE)
head(d)
# Chunk 8
names(d)
# Chunk 9
plot(Rb ~ Year_AD, data=d, type="l", pch=16,
ylab="ppm", xlab="Year")
ggplot(data = d, aes(x=Year_AD, y= Rb)) + geom_line()
# Chunk 10
pacf1 <- pacf(d$Rb, main="PACF")
# Chunk 11
lm1 <- lm(Rb ~ Year_AD, data=d)
summary (lm1)
# Chunk 12
d$mod.resid <- residuals(lm1)
pacf2 <- pacf(d$mod.resid, main="PACF - Rb residuals")
pacf2
# Chunk 13
### The arima() function in r is the model we will use to fit the data based on the parameters predicted by the pacf(). Specifically, since the values outside the confidence interval were a lag term of 1 and 2 we will use auto-regressive terms and moving average terms near 1-2. In general, it is good to expand a little beyond what is beyond the confidence interval because pacf() is not perfect.
#AR
ar.1 <- arima(d$mod.resid, order=c(1,0,0))
ar.2 <- arima(d$mod.resid, order=c(2,0,0))
ar.3 <- arima(d$mod.resid, order=c(3,0,0))
ar.4 <- arima(d$mod.resid, order=c(4,0,0))
# MA
ma.1 <- arima(d$mod.resid, order=c(0,0,1))
ma.2 <- arima(d$mod.resid, order=c(0,0,2))
ma.3 <- arima(d$mod.resid, order=c(0,0,3))
ma.4 <- arima(d$mod.resid, order=c(0,0,4))
# Chunk 14
AICc(ar.1)
AICc(ar.2)
AICc(ar.3)
AICc(ar.4)
AICc(ma.1)
AICc(ma.2)
AICc(ma.3)
AICc(ma.4)
# Chunk 15
gls.mod1 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=2, q=0))
gls.mod2 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=0, q=3))
# Chunk 16
AICc(gls.mod1)
AICc(gls.mod2)
# Chunk 17
summary(gls.mod1)
confint(gls.mod1)
d$new.residuals <- resid(gls.mod1, type="normalized")
pacf3 <- pacf(d$new.residuals, main="PACF - GLS model residuals")
# Chunk 18
qqnorm(d$new.residuals)
qqline(d$new.residuals)
# Chunk 19
LakeHuron
# Chunk 20
plot(LakeHuron)
# Chunk 21
plot(diff(LakeHuron))
h <- diff(LakeHuron)
# Chunk 22
auto.arima(LakeHuron)
# Chunk 23
a <- arima(LakeHuron, c(0, 1, 0)) ## We make our arima model with the coefficients obtained before
pred <- predict(a, n.ahead = 10) ## We predict the levels of the next 10 years
pred
gls.mod1 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=2, q=0))
gls.mod2 <- gls(Rb ~ Year.AD, data=d, correlation = corARMA(p=0, q=3))
gls.mod1 <- gls(Rb ~ Year_AD, data=d, correlation = corARMA(p=2, q=0))
gls.mod2 <- gls(Rb ~ Year_AD, data=d, correlation = corARMA(p=0, q=3))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(nlme) # gls (generalized least squares)
library(MuMIn) #AICc
library(MASS) # acf(), pacf(), ARIMA()
library(ggplot2) # for graphing
library(curl) # for loading the data
library(forecast) # for choosing arima coefficients
# Chunk 3
AirPassengers #Each value represents the number of people ("Air Passengers") that took the plane the month indicated by the column and the year indicated by the row.
# Chunk 4
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
# Chunk 5
plot(log(AirPassengers)) #Using "log" function to change the variance.
abline(reg=lm(log(AirPassengers)~time(log(AirPassengers))))
# Chunk 6
plot(diff(log(AirPassengers))) #Using "diff" function to change the mean.
abline(reg=lm(diff(log(AirPassengers))~time(diff(log(AirPassengers)))))
# Chunk 7
f <- curl("https://raw.githubusercontent.com/dalarre/Time-Series-Analysis/main/Dataset_R_2.csv")
d <- read.csv(f, header = TRUE)
head(d)
# Chunk 8
names(d)
# Chunk 9
plot(Rb ~ Year_AD, data=d, type="l", pch=16,
ylab="ppm", xlab="Year")
ggplot(data = d, aes(x=Year_AD, y= Rb)) + geom_line()
# Chunk 10
pacf1 <- pacf(d$Rb, main="PACF")
# Chunk 11
lm1 <- lm(Rb ~ Year_AD, data=d)
summary (lm1)
# Chunk 12
d$mod.resid <- residuals(lm1)
pacf2 <- pacf(d$mod.resid, main="PACF - Rb residuals")
pacf2
# Chunk 13
### The arima() function in r is the model we will use to fit the data based on the parameters predicted by the pacf(). Specifically, since the values outside the confidence interval were a lag term of 1 and 2 we will use auto-regressive terms and moving average terms near 1-2. In general, it is good to expand a little beyond what is beyond the confidence interval because pacf() is not perfect.
#AR
ar.1 <- arima(d$mod.resid, order=c(1,0,0))
ar.2 <- arima(d$mod.resid, order=c(2,0,0))
ar.3 <- arima(d$mod.resid, order=c(3,0,0))
ar.4 <- arima(d$mod.resid, order=c(4,0,0))
# MA
ma.1 <- arima(d$mod.resid, order=c(0,0,1))
ma.2 <- arima(d$mod.resid, order=c(0,0,2))
ma.3 <- arima(d$mod.resid, order=c(0,0,3))
ma.4 <- arima(d$mod.resid, order=c(0,0,4))
# Chunk 14
AICc(ar.1)
AICc(ar.2)
AICc(ar.3)
AICc(ar.4)
AICc(ma.1)
AICc(ma.2)
AICc(ma.3)
AICc(ma.4)
# Chunk 15
gls.mod1 <- gls(Rb ~ Year_AD, data=d, correlation = corARMA(p=2, q=0))
gls.mod2 <- gls(Rb ~ Year_AD, data=d, correlation = corARMA(p=0, q=3))
# Chunk 16
AICc(gls.mod1)
AICc(gls.mod2)
# Chunk 17
summary(gls.mod1)
confint(gls.mod1)
d$new.residuals <- resid(gls.mod1, type="normalized")
pacf3 <- pacf(d$new.residuals, main="PACF - GLS model residuals")
# Chunk 18
qqnorm(d$new.residuals)
qqline(d$new.residuals)
# Chunk 19
LakeHuron
# Chunk 20
plot(LakeHuron)
# Chunk 21
plot(diff(LakeHuron))
h <- diff(LakeHuron)
# Chunk 22
auto.arima(LakeHuron)
# Chunk 23
a <- arima(LakeHuron, c(0, 1, 0)) ## We make our arima model with the coefficients obtained before
pred <- predict(a, n.ahead = 10) ## We predict the levels of the next 10 years
pred
